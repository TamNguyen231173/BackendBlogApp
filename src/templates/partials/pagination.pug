nav
  ul.pagination.pagination-rounded.mb-0.mt-3
    - if(current > 1) 
      li.page-item
        a.page-link.btn-prev(aria-label="Previous")
          span(aria-hidden="true") &laquo;
          span.sr-only Previous

    - var n = current - 2 > 0 ? current - 2 : 0;
      while (n < pages && n <= current + 2)
        if (n + 1 == current)
          li.page-item.active
            a.page-link #{ n + 1 }
        else
          li.page-item 
            |
            |
            |
            |
            |
            |
            |
            |
            |
            |
            |
            |
            |
            |
            |
            |
            |
            |
            |
            |
            |
            |
            |
            |
            a.page-link #{ n + 1 }

        if (n + 1 == current + 3 && n + 1 < pages)
          li.page-item
            a.page-link ... #{ pages }
        - n++;

      - if(pages > 1 && current < pages)
        li.page-item
          a.page-link.btn-next(aria-label="Next")
            span(aria-hidden="true") &raquo;
            span.sr-only Next

  script.
    $(document).ready(function () {

      // Render table post 
      const renderPosts = function (data) {
        data.posts.map(
          (post) =>
            (document.getElementById("tbody").innerHTML += `
            <tr>
              <td>${post._id}</td>
              <td>${post.title}</td>
              <td>${post.category.name}</td>
              <td>${post.userInfo.name}</td>
              <td class="table-action">
                  <a
                    id="btn-update-post"
                    class="action-icon"
                    href="/api/posts/editPost/${post._id}"
                    style="cursor: pointer"
                  >
                    <i class="mdi mdi-square-edit-outline"></i>
                  </a>
                  <a
                    id="btn-delete"
                    class="action-icon"
                    style="cursor: pointer"
                    value="${post._id}"
                  >
                    <i class="mdi mdi-delete"></i>
                  </a>
              </td>
            </tr>
          `)
        );
      }

      // Render table user 
      const renderUsers = function (data) {
        data.users.map(
          (user) =>
            (document.getElementById("tbody").innerHTML += `
              <tr>
                <td class="table-user">
                  <img
                    src="${user.avatar}"
                    alt="table-user"
                    class="mr-2 rounded-circle"
                  />
                  ${user.name}
                </td>
                <td>${user.role}</td>
                <td>${user.email}</td>
                <td class="table-action">
                    <a
                      class="action-icon"
                      data-toggle="modal",
                      data-target="#edit-user-modal",
                      value="${user._id}"
                    >
                      <i class="mdi mdi-pencil"></i>
                    </a>
                    <a
                      id="btn-delete"
                      class="action-icon"
                      style="cursor: pointer"
                      value="${user._id}"
                    >
                      <i class="mdi mdi-delete"></i>
                    </a>
                </td>
              </tr>
          `)
        );
      }

      // Get data from server
      var currentPage = !{JSON.stringify(current)};
      var title = !{JSON.stringify(title)};
      var pages = !{JSON.stringify(pages)};

      // Render data table
      const renderTable = function (currentPage) {
         $.ajax({
          url: `/api/${title}/data/${currentPage}`,
          type: "GET",
          success: function (data) {
            document.getElementById("tbody").innerHTML = "";
            if (title == "posts") {
              renderPosts(data);
            } else if (title == "users") {
              renderUsers(data);
            }
            // Render pagination after render table
            renderPagination(currentPage);
          },
        });
      }

      //Render pagination
      const renderPagination = function (currentPage) {
          $('.pagination').empty();
         
          let pagination = ` `;

          if (currentPage > 1)
            pagination += `
                <li class="page-item">
                  <a class="page-link btn-prev" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                    <span class="sr-only">Previous</span>
                  </a>
                </li>
              `;
          let n = currentPage - 2 > 0 ? currentPage - 2 : 0;
          while (n < pages && n <= currentPage + 2) {
            if (n + 1 == currentPage) {
              pagination += `
                <li class="page-item active">
                  <a class="page-link">${n + 1}</a>
                </li>
              `;
            } else {
              pagination += `
                <li class="page-item">
                  <a class="page-link">${n + 1}</a>
                </li>
              `;
            }

            if (n + 1 == currentPage + 3 && n + 1 < pages) {
              pagination += `
                <li class="page-item">
                  <a class="page-link">... ${pages}</a>
                </li>
              `;
            }
            n++;
          }

          if (pages > 1 && currentPage < pages)
            pagination += `
                  <li class="page-item">
                    <a class="page-link btn-next" aria-label="Next">
                      <span aria-hidden="true">&raquo;</span>
                      <span class="sr-only">Next</span>
                    </a>
                  </li>`

          $('.pagination').append(pagination);
      }

      // Pagination click
      $(".pagination").on("click", ".page-link", function () {

        // Get current page and title
        if ($(this).hasClass("btn-prev")) {
          currentPage = currentPage - 1;
          if (currentPage < 1) {
            currentPage = 1;
          }
        } 
        else if ($(this).hasClass("btn-next")) {
          currentPage = currentPage - 1 + 2;
          if (currentPage > pages) {
            currentPage = pages;
          }
        } 
        else {
          if ($(this).text().includes("...")) {
            currentPage = pages - 1 + 1;
          } else {
            currentPage = $(this).text() - 1 + 1;
          }
        }

        // Render data table
        renderTable(currentPage);
      });

       // Catch event delete
      $("#tbody").on("click", "#btn-delete", function () {
        let id = $(this).attr("value");

        $.ajax({
          url: `/api/${title}/manager/${id}`,
          type: "DELETE",
          success: function () {
            $.toast({
                heading: 'Success',
                text: `Delete ${title} successfully`,
                showHideTransition: 'slide',
                icon: 'success',
                position: 'bottom-right',
            })
            renderTable(currentPage);
          },
          error: function (err) {
            $.toast({
                heading: 'Error',
                text: `Delete ${title} failed`,
                showHideTransition: 'slide',
                icon: 'error',
                position: 'bottom-right',
            })
          },
        });
      });

      // ========== Post section ==========
         // Reset Form Create Post
      const resetFormCreate = function () {
        $("#title").val("");
        $("#category").val("");
        $("#logo").val("");
        $("#content").val("");
        $("#image").val("");
      };

      // Add post 
      const addPost = function (data) {
        $.ajax("/api/posts/data/1", {
          data: JSON.stringify(data),
          type: "POST",
          headers: { Authorization: "Bearer " + localStorage.getItem("token") },
          contentType: "application/json",
          success: function () {
            $.toast({
                heading: 'Success',
                text: 'Add post successfully',
                showHideTransition: 'slide',
                icon: 'success',
                position: 'bottom-right',
            })
            renderTable(currentPage);
            resetFormCreate();
          },
          error: function (err) {
            $.toast({
                heading: 'Error',
                text: 'Add post failed',
                showHideTransition: 'slide',
                icon: 'error',
                position: 'bottom-right',
            })
          },
        });
      }

      // Catch event create post
      $("#button-save").on("click", function () {
        // Get data
        let title = $("#title").val();
        let category = { _id: $("#category").val(), name: $("#category option:selected").text() };
        let logo = $("#logo").val();
        let content = $("#content").val();
        let image = $("#image").val();
        let user = !{JSON.stringify(user)};
        let userInfo = {
          _id: user._id,
          name: user.name,
          email: user.email,
          avatar: user.avatar,
        };

        // Create data
        let data = {
          title,
          category,
          logo,
          content,
          image,
          userInfo,
        };

        // Call function add post
        addPost(data);
      });

       // ========== User section ==========

      // Reset Form Create User
      const resetFormCreateUser = function () {
        $("#name-create").val("");
        $("#email-create").val("");
        $("#password-create").val("");
        $("#confirm-password-create").val("");
        $("#avatar-create").val("");
        $("#role-create").val("");
      };

      // Create user function
      const createUser = function (data) {
        $.ajax("/api/auth/register", {
          data: JSON.stringify(data),
          type: "POST",
          contentType: "application/json",
          success: function () {
            $.toast({
                heading: 'Success',
                text: 'Create user successfully',
                showHideTransition: 'slide',
                icon: 'success',
                position: 'bottom-right',
            })
            renderTable(currentPage);
            resetFormCreateUser();
          },
          error: function (err) {
            $.toast({
                heading: 'Error',
                text: 'Create user failed',
                showHideTransition: 'slide',
                icon: 'error',
                position: 'bottom-right',
            })
          },
        });
      };

      $("#button-create-user").click(function () {
          let name = $("#name-create").val();
          let email = $("#email-create").val();
          let password = $("#password-create").val();
          let passwordConfirm = $("#confirm-password-create").val();
          let avatar = $("#avatar-create").val();
          let role = $("#role-create").val();
          let data = {
            name,
            email,
            password,
            passwordConfirm,
            avatar,
            role,
          };

          createUser(data);
       });

      // Edit user function
      const editUser = function (id, data) {
        $.ajax(`/api/users/manager/${id}`, {
          data: JSON.stringify(data),
          type: "PATCH",
          contentType: "application/json",
          success: function () {
            $.toast({
                heading: 'Success',
                text: 'Edit user successfully',
                showHideTransition: 'slide',
                icon: 'success',
                position: 'bottom-right',
            })
            renderTable(currentPage);
          },
          error: function (err) {
            $.toast({
                heading: 'Error',
                text: 'Edit user failed',
                showHideTransition: 'slide',
                icon: 'error',
                position: 'bottom-right',
            })
          },
        });
      };  

      $("#button-edit-user").click(function () {
        let name = $("#name-edit").val();
        let email = $("#email-edit").val();
        let avatar = $("#avatar-edit").val();
        let role = $("#role-edit").val();
        let id = $(this).val();

        let data = {
          name,
          email,
          avatar,
          role,
        };
        editUser(id, data);
      });
    });
